[{"C:\\Projects\\POECUS-master\\client\\src\\index.js":"1","C:\\Projects\\POECUS-master\\client\\src\\App.js":"2","C:\\Projects\\linkedout\\client\\src\\index.js":"3","C:\\Projects\\linkedout\\client\\src\\App.js":"4","C:\\Projects\\linkedout\\client\\src\\components\\admin\\AdminLogin.js":"5","C:\\Projects\\linkedout\\client\\src\\components\\admin\\AdminBoard.js":"6","C:\\Projects\\linkedout\\client\\src\\components\\admin\\AdminNav.js":"7","C:\\Projects\\linkedout\\client\\src\\components\\admin\\AdminJobCard.js":"8","C:\\Projects\\linkedout\\client\\src\\components\\admin\\JobApplicants.js":"9","C:\\Projects\\linkedout\\client\\src\\components\\admin\\ApplicantProfile.js":"10","C:\\Projects\\linkedout\\client\\src\\components\\admin\\CreateJob.js":"11","C:\\Projects\\linkedout\\client\\src\\components\\LoginNav.js":"12","C:\\Projects\\linkedout\\client\\src\\components\\user\\Register.js":"13","C:\\Projects\\linkedout\\client\\src\\components\\user\\AppliedJobs.js":"14","C:\\Projects\\linkedout\\client\\src\\components\\user\\NavBar.js":"15","C:\\Projects\\linkedout\\client\\src\\components\\user\\JobCard.js":"16","C:\\Projects\\linkedout\\client\\src\\components\\user\\JobBoard.js":"17","C:\\Projects\\linkedout\\client\\src\\components\\user\\Profile.js":"18","C:\\Projects\\linkedout\\client\\src\\components\\user\\Login.js":"19","C:\\Projects\\linkedout\\client\\src\\components\\user\\JobDescription.js":"20"},{"size":255,"mtime":1682586912055,"results":"21","hashOfConfig":"22"},{"size":812,"mtime":1682600877065,"results":"23","hashOfConfig":"22"},{"size":530,"mtime":1682907537238,"results":"24","hashOfConfig":"25"},{"size":1792,"mtime":1682907839991,"results":"26","hashOfConfig":"25"},{"size":1569,"mtime":1682872863982,"results":"27","hashOfConfig":"25"},{"size":3812,"mtime":1682872843067,"results":"28","hashOfConfig":"25"},{"size":675,"mtime":1682850509461,"results":"29","hashOfConfig":"25"},{"size":1452,"mtime":1682882800200,"results":"30","hashOfConfig":"25"},{"size":1272,"mtime":1682872916547,"results":"31","hashOfConfig":"25"},{"size":1322,"mtime":1682873023567,"results":"32","hashOfConfig":"25"},{"size":4113,"mtime":1682872903669,"results":"33","hashOfConfig":"25"},{"size":445,"mtime":1682830289941,"results":"34","hashOfConfig":"25"},{"size":4262,"mtime":1682872764820,"results":"35","hashOfConfig":"25"},{"size":2056,"mtime":1682873032778,"results":"36","hashOfConfig":"25"},{"size":762,"mtime":1682828349461,"results":"37","hashOfConfig":"25"},{"size":1350,"mtime":1682880093459,"results":"38","hashOfConfig":"25"},{"size":4427,"mtime":1682872804905,"results":"39","hashOfConfig":"25"},{"size":4482,"mtime":1682872710698,"results":"40","hashOfConfig":"25"},{"size":1677,"mtime":1682872723665,"results":"41","hashOfConfig":"25"},{"size":749,"mtime":1682872747715,"results":"42","hashOfConfig":"25"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ii7ft",{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"zc8bu",{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"58"},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"58"},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"58"},{"filePath":"98","messages":"99","suppressedMessages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"58"},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"105","messages":"106","suppressedMessages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"C:\\Projects\\POECUS-master\\client\\src\\index.js",[],[],"C:\\Projects\\POECUS-master\\client\\src\\App.js",[],[],"C:\\Projects\\linkedout\\client\\src\\index.js",[],[],"C:\\Projects\\linkedout\\client\\src\\App.js",[],[],"C:\\Projects\\linkedout\\client\\src\\components\\admin\\AdminLogin.js",[],[],[],"C:\\Projects\\linkedout\\client\\src\\components\\admin\\AdminBoard.js",["108"],[],"import React, { useState, useEffect, useCallback } from 'react'\r\nimport axios from 'axios'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport AdminNav from './AdminNav'\r\nimport JobCard from './AdminJobCard'\r\nimport jwt from 'jsonwebtoken'\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd'\r\nimport './cssfiles/adminboard.css'\r\nfunction AdminBoard() {\r\n  const [email, setEmail] = useState('')\r\n\r\n  const nav = useNavigate()\r\n\r\n  useEffect(() => {\r\n    const checkAuthorization = () => {\r\n      console.log('AUTHENTICATING')\r\n      const token = localStorage.getItem('token')\r\n      if (token) {\r\n        const admin = jwt.decode(token)\r\n        console.log('USER WHILE AUTHENTICATING : ', admin)\r\n        if (!admin || !admin.isAdmin) {\r\n          localStorage.removeItem('token')\r\n          nav('/admin-login')\r\n        } else {\r\n          setEmail(admin.email)\r\n        }\r\n      } else nav('/admin-login')\r\n    }\r\n    checkAuthorization()\r\n  }, [nav])\r\n\r\n  const [jobs, setJobs] = useState([])\r\n\r\n  useEffect(() => {\r\n    async function fetchJobs() {\r\n      const res = await axios.get('https://linkedoutbackend.onrender.com/admin/jobs')\r\n      const jobs = res.data.jobs\r\n      const newres = await axios.get('https://linkedoutbackend.onrender.com/admin/getorder')\r\n      const order= newres.data.order;\r\n\r\n      const sortedJobs = [];\r\n\r\n      order.forEach((jobId) => {\r\n        const job = jobs.find((job) => job.id === jobId);\r\n        if (job) {\r\n          sortedJobs.push(job);\r\n        }\r\n      });\r\n\r\n      setJobs(sortedJobs)\r\n    }\r\n\r\n    fetchJobs()\r\n  }, [])\r\n\r\n  const handleDrop = (droppedItem) => {\r\n    // Ignore drop outside droppable container\r\n    if (!droppedItem.destination) return;\r\n    var updatedList = [...jobs];\r\n    // Remove dragged item\r\n    const [reorderedItem] = updatedList.splice(droppedItem.source.index, 1);\r\n    // Add dropped item\r\n    updatedList.splice(droppedItem.destination.index, 0, reorderedItem);\r\n    // Update State\r\n    setJobs(updatedList);\r\n    let newOrder = [];\r\n    updatedList.forEach((item) => {\r\n      newOrder.push(item.id); // or newOrder.push(item._id);\r\n    });\r\n\r\n    \r\n\r\n    async function updateOrder() {\r\n      const res = await axios.post(\r\n        'https://linkedoutbackend.onrender.com/admin/orderupdate',\r\n        { displayorder: newOrder }\r\n      )\r\n      console.log(res);\r\n\r\n    }\r\n    updateOrder()\r\n\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <AdminNav />\r\n      <DragDropContext onDragEnd={handleDrop}>\r\n        <Droppable droppableId=\"list-container\">\r\n          {(provided) => (\r\n            <div className=\"list-container\" id=\"adminboard\" {...provided.droppableProps} ref={provided.innerRef}>\r\n              {jobs.map((job, index) => (\r\n                <Draggable key={job.id} draggableId={job._id} index={index}>\r\n                  {(provided) => (\r\n                    <div\r\n                      className=\"item-container\"\r\n                      {...provided.draggableProps}\r\n                      {...provided.dragHandleProps}\r\n                      ref={provided.innerRef}\r\n                      \r\n                    >\r\n                      <JobCard\r\n                        id={job.id}\r\n                        title={job.title}\r\n                        location={job.location}\r\n                        deadline={job.deadline}\r\n                        contact={job.contact}\r\n                        email={email}\r\n                        archived={job.archived}\r\n                      />\r\n                      {/* {index} */}\r\n                    </div>\r\n                  )}\r\n                </Draggable>\r\n              ))}\r\n              {provided.placeholder}\r\n            </div>\r\n          )}\r\n        </Droppable>\r\n      </DragDropContext>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AdminBoard\r\n","C:\\Projects\\linkedout\\client\\src\\components\\admin\\AdminNav.js",[],[],"C:\\Projects\\linkedout\\client\\src\\components\\admin\\AdminJobCard.js",[],[],"C:\\Projects\\linkedout\\client\\src\\components\\admin\\JobApplicants.js",[],[],"C:\\Projects\\linkedout\\client\\src\\components\\admin\\ApplicantProfile.js",[],[],"C:\\Projects\\linkedout\\client\\src\\components\\admin\\CreateJob.js",["109"],[],"import React, { useState, useEffect } from 'react';\r\nimport AdminNav from './AdminNav';\r\nimport {useNavigate} from 'react-router-dom';\r\nimport { toast } from 'react-toastify';\r\nimport jwt from 'jsonwebtoken'\r\n\r\n\r\n\r\nconst CreateJob = () => {\r\n  const [id, setId] = useState('');\r\n  const [title, setTitle] = useState('');\r\n  const [description, setDescription] = useState('');\r\n  const [deadline, setDeadline] = useState('');\r\n  const [location, setLocation] = useState('');\r\n  const [contact, setContact] = useState('');\r\n  const [email, setEmail] = useState('');\r\n  const nav=useNavigate();\r\n\r\n  useEffect(() => {\r\n    const checkAuthorization = () => {\r\n      console.log('AUTHENTICATING')\r\n      const token = localStorage.getItem('token')\r\n      if (token) {\r\n        const admin = jwt.decode(token)\r\n        console.log('USER WHILE AUTHENTICATING : ', admin)\r\n        if (!admin) {\r\n          localStorage.removeItem('token')\r\n          nav('/login')\r\n        } else {\r\n          setEmail(admin.email)\r\n        }\r\n      } else nav('/login')\r\n    }\r\n    checkAuthorization()\r\n  }, [nav])\r\n\r\n  async function AddJob (\r\n    id,\r\n    title,\r\n    description,\r\n    deadline,\r\n    location,\r\n    contact\r\n  ) {\r\n    const res = await fetch('https://linkedoutbackend.onrender.com/admin/createjob', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({\r\n        id: id,\r\n        title: title,\r\n        description: description,\r\n        location: location,\r\n        deadline: deadline,\r\n        contact: contact,\r\n      })\r\n    })\r\n\r\n    const data = await res.json()\r\n    console.log(data)\r\n\r\n    if (data.status === 'ok') {\r\n      toast.success('Job created successfully!', { theme: 'colored' })\r\n      // Redirect the user to the sign-in page\r\n      nav('/admin-board')\r\n    } else {\r\n      toast.error('Failed to create job', { theme: 'colored' })\r\n    }\r\n  }\r\n\r\n  async function handleSubmit (event) {\r\n    event.preventDefault()\r\n\r\n    console.log('SUBMITTED')\r\n    toast.success('Job Added', { theme: 'colored' })\r\n\r\n    AddJob(id, title, description, deadline, location, contact)\r\n  }\r\n\r\n//   const handleSubmit = (e) => {\r\n//     e.preventDefault();\r\n//     // Do something with the form data, like send it to a server\r\n\r\n//     console.log({\r\n//       title,\r\n//       description,\r\n//       deadline,\r\n//       location,\r\n//       contact,\r\n//     });\r\n//   };\r\n\r\n  return (\r\n    <div>\r\n      <AdminNav />\r\n      <form onSubmit={handleSubmit} id=\"createjob\">\r\n        <label htmlFor=\"id\">Job ID:</label>\r\n          <input\r\n            type=\"number\"\r\n            id=\"id\"\r\n            value={id}\r\n            onChange={(e) => setId(e.target.value)}\r\n            \r\n          />\r\n          <br/>\r\n          <label htmlFor=\"title\">Job Title:</label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"title\"\r\n            value={title}\r\n            onChange={(e) => setTitle(e.target.value)}\r\n          />\r\n          <br/>\r\n          <label htmlFor=\"description\">Job Description:</label>\r\n          <textarea\r\n            id=\"description\"\r\n            value={description}\r\n            onChange={(e) => setDescription(e.target.value)}\r\n          ></textarea>\r\n          <br/>\r\n\r\n          <label htmlFor=\"deadline\">Deadline:</label>\r\n          <input\r\n            type=\"date\"\r\n            id=\"deadline\"\r\n            value={deadline}\r\n            onChange={(e) => setDeadline(e.target.value)}\r\n          />\r\n          <br/>\r\n\r\n          <label htmlFor=\"location\">Location:</label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"location\"\r\n            value={location}\r\n            onChange={(e) => setLocation(e.target.value)}\r\n          />\r\n          <br/>\r\n\r\n          <label htmlFor=\"contact\">Contact:</label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"contact\"\r\n            value={contact}\r\n            onChange={(e) => setContact(e.target.value)}\r\n          />\r\n          <br/>\r\n\r\n          <button type=\"submit\">AddJob</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CreateJob;\r\n","C:\\Projects\\linkedout\\client\\src\\components\\LoginNav.js",[],[],"C:\\Projects\\linkedout\\client\\src\\components\\user\\Register.js",[],[],"C:\\Projects\\linkedout\\client\\src\\components\\user\\AppliedJobs.js",[],[],"C:\\Projects\\linkedout\\client\\src\\components\\user\\NavBar.js",[],[],"C:\\Projects\\linkedout\\client\\src\\components\\user\\JobCard.js",[],[],"C:\\Projects\\linkedout\\client\\src\\components\\user\\JobBoard.js",["110","111"],[],"import React from 'react'\r\nimport axios from 'axios'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { useState, useEffect } from 'react'\r\nimport NavBar from './NavBar'\r\nimport JobCard from './JobCard'\r\nimport jwt from 'jsonwebtoken'\r\nimport './cssfiles/jobboard.css'\r\n\r\n\r\nfunction JobBoard () {\r\n  const [email, setEmail] = useState('')\r\n\r\n  const nav = useNavigate()\r\n\r\n  useEffect(() => {\r\n    const checkAuthorization = () => {\r\n      console.log('AUTHENTICATING')\r\n      const token = localStorage.getItem('token')\r\n      if (token) {\r\n        const user = jwt.decode(token)\r\n        console.log('USER WHILE AUTHENTICATING : ', user)\r\n        if (!user) {\r\n          localStorage.removeItem('token')\r\n          nav('/login')\r\n        } else {\r\n          setEmail(user.email)\r\n        }\r\n      } else nav('/login')\r\n    }\r\n    checkAuthorization()\r\n  }, [nav])\r\n\r\n  const [jobCards, setJobCards] = useState([])\r\n  const [jobs, setJobs] = useState([])\r\n\r\n\r\n  // useEffect(() => {\r\n  //   async function fetchJobs () {\r\n  //     const res = await axios.get('http://localhost:3000/user/jobs')\r\n  //     const returnedjobs = res.data.jobs\r\n  //     const newres = await axios.get('http://localhost:3000/admin/getorder')\r\n  //     const order= newres.data.order;\r\n  //     console.log(order);\r\n  //     console.log(\"returned\",returnedjobs);\r\n  //     const sortedJobs = [];\r\n\r\n  //     order.forEach((jobId) => {\r\n  //       const job = returnedjobs.find((job) => job.id === jobId);\r\n  //       if (job) {\r\n  //         sortedJobs.push(job);\r\n  //       }\r\n  //     });\r\n      \r\n  //     setJobs(sortedJobs)\r\n\r\n  //     const res2 = await axios.post(\"http://localhost:3000/user/applied-jobs\", {email: email});\r\n  //     const appliedJobIds = res2.data.appliedJobs.map(job => job.id);\r\n\r\n  //     console.log(\"applied:\" , appliedJobIds);\r\n  //     console.log(\"jobs:\", jobs);\r\n\r\n  //     var b = new Set(appliedJobIds)\r\n  //     var unappliedJobs = [...jobs].filter(x => ! b.has(x.id));\r\n\r\n  //     // appliedJobs=jobs-appliedJobs\r\n  //     setJobCards(\r\n  //       unappliedJobs.map(job => (\r\n  //         <JobCard\r\n  //           id={job.id}\r\n  //           title={job.title}\r\n  //           location={job.location}\r\n  //           deadline={job.deadline}\r\n  //           contact={job.contact}\r\n  //           email={email}\r\n  //           archived={job.archived}\r\n  //           hasApplied={false}\r\n  //         />\r\n  //       ))\r\n  //     )\r\n\r\n\r\n  //   setJobCards(\r\n  //     unappliedJobs.map(job => (\r\n  //       <JobCard\r\n  //         id={job.id}\r\n  //         title={job.title}\r\n  //         location={job.location}\r\n  //         deadline={job.deadline}\r\n  //         contact={job.contact}\r\n  //         email={email}\r\n  //       />\r\n  //     ))\r\n  //   )}\r\n  \r\n\r\n  //   fetchJobs()\r\n  // }, [email,jobs])\r\n  \r\n  const [sortedJobs, setSortedJobs] = useState([]);\r\n\r\n  useEffect(() => {\r\n    async function fetchJobs () {\r\n      // Fetch jobs and order from server\r\n      const res = await axios.get('https://linkedoutbackend.onrender.com/user/jobs')\r\n      const returnedjobs = res.data.jobs\r\n      const newres = await axios.get('https://linkedoutbackend.onrender.com/admin/getorder')\r\n      const order= newres.data.order;\r\n  \r\n      // Sort jobs according to order\r\n      const sortedJobs = [];\r\n      order.forEach((jobId) => {\r\n        const job = returnedjobs.find((job) => job.id === jobId);\r\n        if (job) {\r\n          sortedJobs.push(job);\r\n        }\r\n      });\r\n  \r\n      // Fetch applied jobs and filter out already applied jobs\r\n      const res2 = await axios.post(\"https://linkedoutbackend.onrender.com/user/applied-jobs\", {email: email});\r\n      const appliedJobIds = res2.data.appliedJobs.map(job => job.id);\r\n      const unappliedJobs = sortedJobs.filter(job => !appliedJobIds.includes(job.id));\r\n  \r\n      // Update the state of jobs and jobCards\r\n      setJobs(sortedJobs)\r\n      setJobCards(\r\n        unappliedJobs.map(job => (\r\n          <JobCard\r\n            id={job.id}\r\n            title={job.title}\r\n            location={job.location}\r\n            deadline={job.deadline}\r\n            contact={job.contact}\r\n            email={email}\r\n          />\r\n        ))\r\n      )\r\n    }\r\n  \r\n    fetchJobs()\r\n  }, [email, sortedJobs])\r\n  \r\n\r\n  return (\r\n    <div className=\"jobboard\">\r\n      <NavBar />\r\n      <div id=\"cardholder\">{jobCards}</div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default JobBoard\r\n","C:\\Projects\\linkedout\\client\\src\\components\\user\\Profile.js",["112"],[],"import React, { useState , useEffect} from \"react\";\r\nimport { useNavigate, useParams } from 'react-router-dom'\r\nimport NavBar from './NavBar';\r\nimport './cssfiles/profile.css'\r\nimport jwt from 'jsonwebtoken';\r\nimport axios from 'axios';\r\n\r\nfunction Profile() {\r\n\r\n  const nav = useNavigate();\r\n\r\n  const [email, setEmail] = useState(\"\");\r\n  // const [name, setName] = useState('')\r\n  // const [dob, setDob] = useState('')\r\n  // const [phone, setPhone] = useState()\r\n  // const [qualifications, setQualifications] = useState()\r\n  // const [experience, setExperience] = useState()\r\n\r\n  const [editedName, setEditedName] = useState('');\r\n  const [editedDob, setEditedDob] = useState('');\r\n  const [editedPhone, setEditedPhone] = useState('');\r\n  const [editedQualifications, setEditedQualifications] = useState('');\r\n  const [editedExperience, setEditedExperience] = useState('');\r\n  const [isEditing, setIsEditing] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const checkAuthorization = () => {\r\n      console.log('AUTHENTICATING')\r\n      const token = localStorage.getItem('token')\r\n      if (token) {\r\n        const user = jwt.decode(token)\r\n        console.log('USER WHILE AUTHENTICATING : ', user)\r\n        if (!user) {\r\n          localStorage.removeItem('token')\r\n          nav('/login')\r\n        } else {\r\n          setEmail(user.email)\r\n        }\r\n      } else nav('/login')\r\n    }\r\n    checkAuthorization()\r\n  }, [nav])\r\n\r\n  \r\n\r\n  useEffect(() => {\r\n    console.log(\"FETCHING\");\r\n    console.log(email);\r\n    async function fetchProfile () {\r\n\r\n      const res = await axios.post(\r\n        'https://linkedoutbackend.onrender.com/user/profile',\r\n        { email: email }\r\n      )\r\n      console.log( res.data.user);\r\n      setEditedName(res.data.user.name)\r\n      setEditedDob(res.data.user.dob)\r\n      setEditedPhone(res.data.user.phone)\r\n      setEditedQualifications(res.data.user.qualifications)\r\n      setEditedExperience(res.data.user.experience)\r\n    }\r\n    fetchProfile();\r\n  }, [email])\r\n  \r\n  \r\n\r\n\r\n  const handleUpdate = () => {\r\n    setIsEditing(true);\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    axios.post('https://linkedoutbackend.onrender.com/user/update', {\r\n      email: email,\r\n      name: editedName,\r\n      dob: editedDob,\r\n      phone:editedPhone,\r\n      qualifications:editedQualifications,\r\n      experience:editedExperience\r\n      \r\n    })\r\n    setIsEditing(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <NavBar />\r\n      <h1 className=\"profile-title\">Profile Page</h1>\r\n      {isEditing ? (\r\n        <form className=\"profile-form\" onSubmit={handleSubmit}>\r\n          <label htmlFor=\"name\">Name:</label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"name\"\r\n            value={editedName}\r\n            onChange={(event) => setEditedName(event.target.value)}\r\n          />\r\n          <br />\r\n          <label htmlFor=\"dob\">Date of Birth:</label>\r\n          <input\r\n            type=\"date\"\r\n            id=\"dob\"\r\n            value={editedDob}\r\n            onChange={(event) => setEditedDob(event.target.value)}\r\n          />\r\n          <br />\r\n  \r\n          <br />\r\n          <label htmlFor=\"phone\">Phone Number:</label>\r\n          <input\r\n            type=\"tel\"\r\n            id=\"phone\"\r\n            value={editedPhone}\r\n            onChange={(event) => setEditedPhone(event.target.value)}\r\n          />\r\n          <br />\r\n          <label htmlFor=\"qualifications\">Qualifications:</label>\r\n          <textarea\r\n            id=\"qualifications\"\r\n            value={editedQualifications}\r\n            onChange={(event) => setEditedQualifications(event.target.value)}\r\n          ></textarea>\r\n          <br />\r\n          <label htmlFor=\"experience\">Experience:</label>\r\n          <textarea\r\n            id=\"experience\"\r\n            value={editedExperience}\r\n            onChange={(event) => setEditedExperience(event.target.value)}\r\n          ></textarea>\r\n          <br />\r\n          <button type=\"submit\">Save</button>\r\n        </form>\r\n      ) : (\r\n        <div className=\"profile-container\">\r\n          <p>Name: {editedName}</p>\r\n          <p>Date of Birth: {editedDob}</p>\r\n          <p>Email: {email}</p>\r\n          <p>Phone Number: {editedPhone}</p>\r\n          <p>Qualifications: {editedQualifications}</p>\r\n          <p>Experience: {editedExperience}</p>\r\n          <button id=\"update\" onClick={handleUpdate}>Update</button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Profile;\r\n","C:\\Projects\\linkedout\\client\\src\\components\\user\\Login.js",[],[],"C:\\Projects\\linkedout\\client\\src\\components\\user\\JobDescription.js",[],[],{"ruleId":"113","severity":1,"message":"114","line":1,"column":38,"nodeType":"115","messageId":"116","endLine":1,"endColumn":49},{"ruleId":"113","severity":1,"message":"117","line":16,"column":10,"nodeType":"115","messageId":"116","endLine":16,"endColumn":15},{"ruleId":"113","severity":1,"message":"118","line":35,"column":10,"nodeType":"115","messageId":"116","endLine":35,"endColumn":14},{"ruleId":"113","severity":1,"message":"119","line":100,"column":22,"nodeType":"115","messageId":"116","endLine":100,"endColumn":35},{"ruleId":"113","severity":1,"message":"120","line":2,"column":23,"nodeType":"115","messageId":"116","endLine":2,"endColumn":32},"no-unused-vars","'useCallback' is defined but never used.","Identifier","unusedVar","'email' is assigned a value but never used.","'jobs' is assigned a value but never used.","'setSortedJobs' is assigned a value but never used.","'useParams' is defined but never used."]