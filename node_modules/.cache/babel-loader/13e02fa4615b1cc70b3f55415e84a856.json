{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projects\\\\linkedout\\\\client\\\\src\\\\components\\\\user\\\\JobBoard.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport NavBar from './NavBar';\nimport JobCard from './JobCard';\nimport jwt from 'jsonwebtoken';\nimport './cssfiles/jobboard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction JobBoard() {\n  _s();\n\n  const [email, setEmail] = useState('');\n  const nav = useNavigate();\n  useEffect(() => {\n    const checkAuthorization = () => {\n      console.log('AUTHENTICATING');\n      const token = localStorage.getItem('token');\n\n      if (token) {\n        const user = jwt.decode(token);\n        console.log('USER WHILE AUTHENTICATING : ', user);\n\n        if (!user) {\n          localStorage.removeItem('token');\n          nav('/login');\n        } else {\n          setEmail(user.email);\n        }\n      } else nav('/login');\n    };\n\n    checkAuthorization();\n  }, [nav]);\n  const [jobCards, setJobCards] = useState([]);\n  const [jobs, setJobs] = useState([]); // useEffect(() => {\n  //   async function fetchJobs () {\n  //     const res = await axios.get('http://localhost:3000/user/jobs')\n  //     const returnedjobs = res.data.jobs\n  //     const newres = await axios.get('http://localhost:3000/admin/getorder')\n  //     const order= newres.data.order;\n  //     console.log(order);\n  //     console.log(\"returned\",returnedjobs);\n  //     const sortedJobs = [];\n  //     order.forEach((jobId) => {\n  //       const job = returnedjobs.find((job) => job.id === jobId);\n  //       if (job) {\n  //         sortedJobs.push(job);\n  //       }\n  //     });\n  //     setJobs(sortedJobs)\n  //     const res2 = await axios.post(\"http://localhost:3000/user/applied-jobs\", {email: email});\n  //     const appliedJobIds = res2.data.appliedJobs.map(job => job.id);\n  //     console.log(\"applied:\" , appliedJobIds);\n  //     console.log(\"jobs:\", jobs);\n  //     var b = new Set(appliedJobIds)\n  //     var unappliedJobs = [...jobs].filter(x => ! b.has(x.id));\n  //     // appliedJobs=jobs-appliedJobs\n  //     setJobCards(\n  //       unappliedJobs.map(job => (\n  //         <JobCard\n  //           id={job.id}\n  //           title={job.title}\n  //           location={job.location}\n  //           deadline={job.deadline}\n  //           contact={job.contact}\n  //           email={email}\n  //           archived={job.archived}\n  //           hasApplied={false}\n  //         />\n  //       ))\n  //     )\n  //   setJobCards(\n  //     unappliedJobs.map(job => (\n  //       <JobCard\n  //         id={job.id}\n  //         title={job.title}\n  //         location={job.location}\n  //         deadline={job.deadline}\n  //         contact={job.contact}\n  //         email={email}\n  //       />\n  //     ))\n  //   )}\n  //   fetchJobs()\n  // }, [email,jobs])\n\n  const [sortedJobs, setSortedJobs] = useState([]);\n  useEffect(() => {\n    async function fetchJobs() {\n      // Fetch jobs and order from server\n      const res = await axios.get('http://localhost:3000/user/jobs');\n      const returnedjobs = res.data.jobs;\n      const newres = await axios.get('http://localhost:3000/admin/getorder');\n      const order = newres.data.order; // Sort jobs according to order\n\n      const sortedJobs = [];\n      order.forEach(jobId => {\n        const job = returnedjobs.find(job => job.id === jobId);\n\n        if (job) {\n          sortedJobs.push(job);\n        }\n      }); // Fetch applied jobs and filter out already applied jobs\n\n      const res2 = await axios.post(\"http://localhost:3000/user/applied-jobs\", {\n        email: email\n      });\n      const appliedJobIds = res2.data.appliedJobs.map(job => job.id);\n      const unappliedJobs = sortedJobs.filter(job => !appliedJobIds.includes(job.id)); // Update the state of jobs and jobCards\n\n      setJobs(sortedJobs);\n      setJobCards(unappliedJobs.map(job => /*#__PURE__*/_jsxDEV(JobCard, {\n        id: job.id,\n        title: job.title,\n        location: job.location,\n        deadline: job.deadline,\n        contact: job.contact,\n        email: email\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 11\n      }, this)));\n    }\n\n    fetchJobs();\n  }, [email, sortedJobs]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"jobboard\",\n    children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"cardholder\",\n      children: jobCards\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 5\n  }, this);\n}\n\n_s(JobBoard, \"CbkHdb4L4CW/BU15MeOcik//rtc=\", false, function () {\n  return [useNavigate];\n});\n\n_c = JobBoard;\nexport default JobBoard;\n\nvar _c;\n\n$RefreshReg$(_c, \"JobBoard\");","map":{"version":3,"names":["React","axios","useNavigate","useState","useEffect","NavBar","JobCard","jwt","JobBoard","email","setEmail","nav","checkAuthorization","console","log","token","localStorage","getItem","user","decode","removeItem","jobCards","setJobCards","jobs","setJobs","sortedJobs","setSortedJobs","fetchJobs","res","get","returnedjobs","data","newres","order","forEach","jobId","job","find","id","push","res2","post","appliedJobIds","appliedJobs","map","unappliedJobs","filter","includes","title","location","deadline","contact"],"sources":["C:/Projects/linkedout/client/src/components/user/JobBoard.js"],"sourcesContent":["import React from 'react'\r\nimport axios from 'axios'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { useState, useEffect } from 'react'\r\nimport NavBar from './NavBar'\r\nimport JobCard from './JobCard'\r\nimport jwt from 'jsonwebtoken'\r\nimport './cssfiles/jobboard.css'\r\n\r\n\r\nfunction JobBoard () {\r\n  const [email, setEmail] = useState('')\r\n\r\n  const nav = useNavigate()\r\n\r\n  useEffect(() => {\r\n    const checkAuthorization = () => {\r\n      console.log('AUTHENTICATING')\r\n      const token = localStorage.getItem('token')\r\n      if (token) {\r\n        const user = jwt.decode(token)\r\n        console.log('USER WHILE AUTHENTICATING : ', user)\r\n        if (!user) {\r\n          localStorage.removeItem('token')\r\n          nav('/login')\r\n        } else {\r\n          setEmail(user.email)\r\n        }\r\n      } else nav('/login')\r\n    }\r\n    checkAuthorization()\r\n  }, [nav])\r\n\r\n  const [jobCards, setJobCards] = useState([])\r\n  const [jobs, setJobs] = useState([])\r\n\r\n\r\n  // useEffect(() => {\r\n  //   async function fetchJobs () {\r\n  //     const res = await axios.get('http://localhost:3000/user/jobs')\r\n  //     const returnedjobs = res.data.jobs\r\n  //     const newres = await axios.get('http://localhost:3000/admin/getorder')\r\n  //     const order= newres.data.order;\r\n  //     console.log(order);\r\n  //     console.log(\"returned\",returnedjobs);\r\n  //     const sortedJobs = [];\r\n\r\n  //     order.forEach((jobId) => {\r\n  //       const job = returnedjobs.find((job) => job.id === jobId);\r\n  //       if (job) {\r\n  //         sortedJobs.push(job);\r\n  //       }\r\n  //     });\r\n      \r\n  //     setJobs(sortedJobs)\r\n\r\n  //     const res2 = await axios.post(\"http://localhost:3000/user/applied-jobs\", {email: email});\r\n  //     const appliedJobIds = res2.data.appliedJobs.map(job => job.id);\r\n\r\n  //     console.log(\"applied:\" , appliedJobIds);\r\n  //     console.log(\"jobs:\", jobs);\r\n\r\n  //     var b = new Set(appliedJobIds)\r\n  //     var unappliedJobs = [...jobs].filter(x => ! b.has(x.id));\r\n\r\n  //     // appliedJobs=jobs-appliedJobs\r\n  //     setJobCards(\r\n  //       unappliedJobs.map(job => (\r\n  //         <JobCard\r\n  //           id={job.id}\r\n  //           title={job.title}\r\n  //           location={job.location}\r\n  //           deadline={job.deadline}\r\n  //           contact={job.contact}\r\n  //           email={email}\r\n  //           archived={job.archived}\r\n  //           hasApplied={false}\r\n  //         />\r\n  //       ))\r\n  //     )\r\n\r\n\r\n  //   setJobCards(\r\n  //     unappliedJobs.map(job => (\r\n  //       <JobCard\r\n  //         id={job.id}\r\n  //         title={job.title}\r\n  //         location={job.location}\r\n  //         deadline={job.deadline}\r\n  //         contact={job.contact}\r\n  //         email={email}\r\n  //       />\r\n  //     ))\r\n  //   )}\r\n  \r\n\r\n  //   fetchJobs()\r\n  // }, [email,jobs])\r\n  \r\n  const [sortedJobs, setSortedJobs] = useState([]);\r\n\r\n  useEffect(() => {\r\n    async function fetchJobs () {\r\n      // Fetch jobs and order from server\r\n      const res = await axios.get('http://localhost:3000/user/jobs')\r\n      const returnedjobs = res.data.jobs\r\n      const newres = await axios.get('http://localhost:3000/admin/getorder')\r\n      const order= newres.data.order;\r\n  \r\n      // Sort jobs according to order\r\n      const sortedJobs = [];\r\n      order.forEach((jobId) => {\r\n        const job = returnedjobs.find((job) => job.id === jobId);\r\n        if (job) {\r\n          sortedJobs.push(job);\r\n        }\r\n      });\r\n  \r\n      // Fetch applied jobs and filter out already applied jobs\r\n      const res2 = await axios.post(\"http://localhost:3000/user/applied-jobs\", {email: email});\r\n      const appliedJobIds = res2.data.appliedJobs.map(job => job.id);\r\n      const unappliedJobs = sortedJobs.filter(job => !appliedJobIds.includes(job.id));\r\n  \r\n      // Update the state of jobs and jobCards\r\n      setJobs(sortedJobs)\r\n      setJobCards(\r\n        unappliedJobs.map(job => (\r\n          <JobCard\r\n            id={job.id}\r\n            title={job.title}\r\n            location={job.location}\r\n            deadline={job.deadline}\r\n            contact={job.contact}\r\n            email={email}\r\n          />\r\n        ))\r\n      )\r\n    }\r\n  \r\n    fetchJobs()\r\n  }, [email, sortedJobs])\r\n  \r\n\r\n  return (\r\n    <div className=\"jobboard\">\r\n      <NavBar />\r\n      <div id=\"cardholder\">{jobCards}</div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default JobBoard\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}